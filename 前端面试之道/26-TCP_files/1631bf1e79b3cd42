f (true === this.New)
			nFlags |= 4;

		if (undefined === this.Old)
			nFlags |= 8;
		else if (true === this.Old)
			nFlags |= 16;

		Writer.WriteLong(nFlags);
	};
	CChangesBaseBoolProperty.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : New value
		// 4-bit : IsUndefined Old
		// 5-bit : Old value

		var nFlags = Reader.GetLong();

		if (nFlags & 1)
			this.Color = true;
		else
			this.Color = false;

		if (nFlags & 2)
			this.New = undefined;
		else if (nFlags & 4)
			this.New = true;
		else
			this.New = false;

		if (nFlags & 8)
			this.Old = undefined;
		else if (nFlags & 16)
			this.Old = true;
		else
			this.Old = false;
	};
	window['AscDFH'].CChangesBaseBoolProperty = CChangesBaseBoolProperty;
	/**
	 * Базовый класс для изменения числовых (double) свойств.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseDoubleProperty(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseDoubleProperty.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseDoubleProperty.prototype.constructor = CChangesBaseDoubleProperty;
	CChangesBaseDoubleProperty.prototype.WriteToBinary = function(Writer)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// double : New
		// double : Old

		var nFlags = 0;

		if (false !== this.Color)
			nFlags |= 1;

		if (undefined === this.New)
			nFlags |= 2;

		if (undefined === this.Old)
			nFlags |= 4;

		Writer.WriteLong(nFlags);

		if (undefined !== this.New)
			Writer.WriteDouble(this.New);

		if (undefined !== this.Old)
			Writer.WriteDouble(this.Old);
	};
	CChangesBaseDoubleProperty.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// double : New
		// double : Old


		var nFlags = Reader.GetLong();

		if (nFlags & 1)
			this.Color = true;
		else
			this.Color = false;

		if (nFlags & 2)
			this.New = undefined;
		else
			this.New = Reader.GetDouble();

		if (nFlags & 4)
			this.Old = undefined;
		else
			this.Old = Reader.GetDouble();
	};
	window['AscDFH'].CChangesBaseDoubleProperty = CChangesBaseDoubleProperty;
	/**
	 * Базовый класс для изменения объектных свойств, т.е. если свойство задано объектом.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseObjectProperty(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseObjectProperty.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseObjectProperty.prototype.constructor = CChangesBaseObjectProperty;
	CChangesBaseObjectProperty.prototype.WriteToBinary = function(Writer)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// Variable : New
		// Variable : Old

		var nFlags = 0;

		if (false !== this.Color)
			nFlags |= 1;

		if (undefined === this.New)
			nFlags |= 2;

		if (undefined === this.Old)
			nFlags |= 4;

		Writer.WriteLong(nFlags);

		if (undefined !== this.New && this.New.Write_ToBinary)
			this.New.Write_ToBinary(Writer);

		if (undefined !== this.Old && this.Old.Write_ToBinary)
			this.Old.Write_ToBinary(Writer);
	};
	CChangesBaseObjectProperty.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// Variable : New
		// Variable : Old

		var nFlags = Reader.GetLong();

		if (nFlags & 1)
			this.Color = true;
		else
			this.Color = false;

		if (nFlags & 2)
		{
			if (true === this.private_IsCreateEmptyObject())
				this.New = this.private_CreateObject();
			else
				this.New = undefined;
		}
		else
		{
			this.New = this.private_CreateObject();
			if (this.New && this.New.Read_FromBinary)
				this.New.Read_FromBinary(Reader);
		}

		if (nFlags & 4)
		{
			if (true === this.private_IsCreateEmptyObject())
				this.Old = this.private_CreateObject();
			else
				this.Old = undefined;
		}
		else
		{
			this.Old = this.private_CreateObject();
			if (this.Old && this.Old.Read_FromBinary)
				this.Old.Read_FromBinary(Reader);
		}
	};
	CChangesBaseObjectProperty.prototype.private_CreateObject = function()
	{
		// Эту функцию нужно переопределить в дочернем классе
		return null;
	};
	CChangesBaseObjectProperty.prototype.private_IsCreateEmptyObject = function()
	{
		return false;
	};
	window['AscDFH'].CChangesBaseObjectProperty = CChangesBaseObjectProperty;
	/**
	 * Базовый класс для изменения числовых (long) свойств.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseLongProperty(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseLongProperty.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseLongProperty.prototype.constructor = CChangesBaseLongProperty;
	CChangesBaseLongProperty.prototype.WriteToBinary = function(Writer)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// long : New
		// long : Old

		var nFlags = 0;

		if (false !== this.Color)
			nFlags |= 1;

		if (undefined === this.New)
			nFlags |= 2;

		if (undefined === this.Old)
			nFlags |= 4;

		Writer.WriteLong(nFlags);

		if (undefined !== this.New)
			Writer.WriteLong(this.New);

		if (undefined !== this.Old)
			Writer.WriteLong(this.Old);
	};
	CChangesBaseLongProperty.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// long : New
		// long : Old


		var nFlags = Reader.GetLong();

		if (nFlags & 1)
			this.Color = true;
		else
			this.Color = false;

		if (nFlags & 2)
			this.New = undefined;
		else
			this.New = Reader.GetLong();

		if (nFlags & 4)
			this.Old = undefined;
		else
			this.Old = Reader.GetLong();
	};
	window['AscDFH'].CChangesBaseLongProperty = CChangesBaseLongProperty;
	/**
	 * Базовый класс для изменения строковых свойств.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseStringProperty(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseStringProperty.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseStringProperty.prototype.constructor = CChangesBaseStringProperty;
	CChangesBaseStringProperty.prototype.WriteToBinary = function(Writer)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// string : New
		// string : Old

		var nFlags = 0;

		if (false !== this.Color)
			nFlags |= 1;

		if (undefined === this.New)
			nFlags |= 2;

		if (undefined === this.Old)
			nFlags |= 4;

		Writer.WriteLong(nFlags);

		if (undefined !== this.New)
			Writer.WriteString2(this.New);

		if (undefined !== this.Old)
			Writer.WriteString2(this.Old);
	};
	CChangesBaseStringProperty.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// string : New
		// string : Old


		var nFlags = Reader.GetLong();

		if (nFlags & 1)
			this.Color = true;
		else
			this.Color = false;

		if (nFlags & 2)
			this.New = undefined;
		else
			this.New = Reader.GetString2();

		if (nFlags & 4)
			this.Old = undefined;
		else
			this.Old = Reader.GetString2();
	};
	window['AscDFH'].CChangesBaseStringProperty = CChangesBaseStringProperty;
	/**
	 * Базовый класс для изменения числовых (byte) свойств.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseByteProperty(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseByteProperty.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseByteProperty.prototype.constructor = CChangesBaseByteProperty;
	CChangesBaseByteProperty.prototype.WriteToBinary = function(Writer)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// byte  : New
		// byte  : Old

		var nFlags = 0;

		if (false !== this.Color)
			nFlags |= 1;

		if (undefined === this.New)
			nFlags |= 2;

		if (undefined === this.Old)
			nFlags |= 4;

		Writer.WriteLong(nFlags);

		if (undefined !== this.New)
			Writer.WriteByte(this.New);

		if (undefined !== this.Old)
			Writer.WriteByte(this.Old);
	};
	CChangesBaseByteProperty.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : Flag
		// 1-bit : Подсвечивать ли данные изменения
		// 2-bit : IsUndefined New
		// 3-bit : IsUndefined Old
		// byte  : New
		// byte  : Old


		var nFlags = Reader.GetLong();

		if (nFlags & 1)
			this.Color = true;
		else
			this.Color = false;

		if (nFlags & 2)
			this.New = undefined;
		else
			this.New = Reader.GetByte();

		if (nFlags & 4)
			this.Old = undefined;
		else
			this.Old = Reader.GetByte();
	};
	window['AscDFH'].CChangesBaseByteProperty = CChangesBaseByteProperty;
	/**
	 * Базовый класс для изменения числовых(long) значений.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseLongValue(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseLongValue.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseLongValue.prototype.constructor = CChangesBaseLongValue;
	CChangesBaseLongValue.prototype.WriteToBinary = function(Writer)
	{
		// Long  : New
		// Long  : Old

		Writer.WriteLong(this.New);
		Writer.WriteLong(this.Old);
	};
	CChangesBaseLongValue.prototype.ReadFromBinary = function(Reader)
	{
		// Long  : New
		// Long  : Old

		this.New = Reader.GetLong();
		this.Old = Reader.GetLong();
	};
	window['AscDFH'].CChangesBaseLongValue = CChangesBaseLongValue;
	/**
	 * Базовый класс для изменения булевых значений.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseBoolValue(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseBoolValue.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseBoolValue.prototype.constructor = CChangesBaseBoolValue;
	CChangesBaseBoolValue.prototype.WriteToBinary = function(Writer)
	{
		// Bool  : New
		// Bool  : Old

		Writer.WriteBool(this.New);
		Writer.WriteBool(this.Old);
	};
	CChangesBaseBoolValue.prototype.ReadFromBinary = function(Reader)
	{
		// Bool  : New
		// Bool  : Old

		this.New = Reader.GetBool();
		this.Old = Reader.GetBool();
	};
	window['AscDFH'].CChangesBaseBoolValue = CChangesBaseBoolValue;
	/**
	 * Базовый класс для изменения объектных значений.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseObjectProperty}
	 */
	function CChangesBaseObjectValue(Class, Old, New, Color)
	{
		CChangesBaseObjectProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseObjectValue.prototype = Object.create(CChangesBaseObjectProperty.prototype);
	CChangesBaseObjectValue.prototype.constructor = CChangesBaseObjectValue;
	CChangesBaseObjectValue.prototype.private_IsCreateEmptyObject = function()
	{
		return true;
	};
	window['AscDFH'].CChangesBaseObjectValue = CChangesBaseObjectValue;
	/**
	 * Базовый класс для изменения строковых значений.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseStringValue(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseStringValue.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseStringValue.prototype.constructor = CChangesBaseStringValue;
	CChangesBaseStringValue.prototype.WriteToBinary = function(Writer)
	{
		// String : New
		// String : Old

		Writer.WriteString2(this.New);
		Writer.WriteString2(this.Old);
	};
	CChangesBaseStringValue.prototype.ReadFromBinary = function(Reader)
	{
		// String : New
		// String : Old

		this.New = Reader.GetString2();
		this.Old = Reader.GetString2();
	};
	window['AscDFH'].CChangesBaseStringValue = CChangesBaseStringValue;
	/**
	 * Базовый класс для изменения числовых(byte) значений.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseByteValue(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseByteValue.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseByteValue.prototype.constructor = CChangesBaseByteValue;
	CChangesBaseByteValue.prototype.WriteToBinary = function(Writer)
	{
		// Byte  : New
		// Byte  : Old

		Writer.WriteByte(this.New);
		Writer.WriteByte(this.Old);
	};
	CChangesBaseByteValue.prototype.ReadFromBinary = function(Reader)
	{
		// Byte  : New
		// Byte  : Old

		this.New = Reader.GetByte();
		this.Old = Reader.GetByte();
	};
	window['AscDFH'].CChangesBaseByteValue = CChangesBaseByteValue;
	/**
	 * Базовый класс для изменения числовых(double) значений.
	 * @constructor
	 * @extends {AscDFH.CChangesBaseProperty}
	 */
	function CChangesBaseDoubleValue(Class, Old, New, Color)
	{
		CChangesBaseProperty.call(this, Class, Old, New, Color);
	}

	CChangesBaseDoubleValue.prototype = Object.create(CChangesBaseProperty.prototype);
	CChangesBaseDoubleValue.prototype.constructor = CChangesBaseDoubleValue;
	CChangesBaseDoubleValue.prototype.WriteToBinary = function(Writer)
	{
		// Double : New
		// Double : Old

		Writer.WriteDouble(this.New);
		Writer.WriteDouble(this.Old);
	};
	CChangesBaseDoubleValue.prototype.ReadFromBinary = function(Reader)
	{
		// Double : New
		// Double : Old

		this.New = Reader.GetDouble();
		this.Old = Reader.GetDouble();
	};
	window['AscDFH'].CChangesBaseDoubleValue = CChangesBaseDoubleValue;
})(window);

/*
 * (c) Copyright Ascensio System SIA 2010-2018
 *
 * This program is a free software product. You can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License (AGPL)
 * version 3 as published by the Free Software Foundation. In accordance with
 * Section 7(a) of the GNU AGPL its Section 15 shall be amended to the effect
 * that Ascensio System SIA expressly excludes the warranty of non-infringement
 * of any third-party rights.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE. For
 * details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
 *
 * You can contact Ascensio System SIA at Lubanas st. 125a-25, Riga, Latvia,
 * EU, LV-1021.
 *
 * The  interactive user interfaces in modified source and object code versions
 * of the Program must display Appropriate Legal Notices, as required under
 <template>
  <div class="home-page" :style="regisCol">
    <div class="max-container">
      <van-nav-bar title="首页" :border="false" :fixed="true" :style="bgc">
        <div slot="title" :style="navContainer">{{ $t("lang.Quotes") }}</div>
      </van-nav-bar>

      <div
        class="quotes-container-list"
        @click="goNext(index)"
        v-for="(item, index) in list"
        :key="index"
      >
        <div class="top-list">
          <div
            class="top-list-left"
            :class="{'fall-right': item[9].close > item[9].open}"
          >{{index}}/USDT</div>
          <div
            class="top-list-right"
            :class="{'fall-right': item[9].close > item[9].open}"
          >{{item[9].amount.toFixed(2)}}</div>
        </div>
        <div class="sec-list">
          <div class="sec-list-title">{{$t('lang.oneHour')}}：{{item[9].vol.toFixed(2)}}</div>
          <div class="sec-list-num">￥51316.02</div>
        </div>
        <div :id="index" class="echart-container chart1"></div>
      </div>

      <van-tabbar route safe-area-inset-bottom :active-color="tabbarTitleCol" :border="false">
        <van-tabbar-item replace to="/information">
          <span>{{ $t("lang.Information") }}</span>
          <img slot="icon" slot-scope="props" :src="props.active ? icon5.active : icon5.normal" />
        </van-tabbar-item>
        <van-tabbar-item replace to="/">
          <span>{{ $t("lang.assets") }}</span>
          <img slot="icon" slot-scope="props" :src="props.active ? icon.active : icon.normal" />
        </van-tabbar-item>
        <van-tabbar-item replace to="/quotespage">
          <span>{{ $t("lang.Quotes") }}</span>
          <img slot="icon" slot-scope="props" :src="props.active ? icon4.active : icon4.normal" />
        </van-tabbar-item>
        <van-tabbar-item replace to="/nodeplan">
          <span>{{ $t("lang.contract") }}</span>
          <img slot="icon" slot-scope="props" :src="props.active ? icon2.active : icon2.normal" />
        </van-tabbar-item>
        <van-tabbar-item replace to="/mypage">
          <span>{{ $t("lang.mine") }}</span>
          <img slot="icon" slot-scope="props" :src="props.active ? icon3.active : icon3.normal" />
        </van-tabbar-item>
      </van-tabbar>
    </div>
  </div>
</template>

<script>
import MinXin from "@/components/mixins.js";
export default {
  name: "quotes",
  props: {},
  mixins: [MinXin],
  data() {
    return {
      list: [],
      show: true
    };
  },
  mounted() {
    // this.$chart.line1("chart1", 965);
    // this.$chart.line1("chart2");
  },
  created() {
    this.getKLine();
  },
  methods: {
    //获取K线图
    getKLine() {
      const that = this;
      that.$api.getKLine({ symbol: "", size: "10" }).then(res => {
        if (res.data.code == 200) {
          that.list = res.data.data;
          that.$nextTick(() => {
            for (let key in that.list) {
              // console.log(key + "---" + JSON.stringify(that.list[key]));
              that.$chart.line1(key, that.list[key]);
            }
            //  that.list.forEach((item, index) => {
            //     that.$chart.line1(item[index]);
            //   });
          });
        }
      });
    },
    //点击图表
    goNext(index) {
      this.$router.push({
        path: "/nodeplan",
        query: {
          symbol: index
        }
      });
    }
  }
};
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped lang="scss">
.home-page {
  background: #ccc;
  height: 100vh;
  overflow-y: scroll;
  padding: 61px 15px 55px;
  box-sizing: border-box;
}
.quotes-container-list {
  padding: 15px 10px 8px;
  box-sizing: border-box;
  background: rgba(255, 255, 255, 1);
  border-radius: 5px;
  margin-bottom: 15px;
}
.top-list {
  display: flex;
  justify-content: space-between;
  color: #3fa01b;
  font-weight: bold;
  .top-list-left {
    font-size: 15px;
  }
  .top-list-right {
    font-size: 25px;
  }
  .fall-right {
    color: #ff3d3d;
  }
  align-items: center;
  margin-bottom: 9px;
}
.sec-list {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
  .sec-list-title {
    font-size: 10px;
    color: #999999;
  }
  .sec-list-num {
    font-size: 12.5px;
    color: #333333;
  }
}
.echart-container {
  height: 65px;
  width: 100%;
}
</style>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         